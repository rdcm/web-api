apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.label }}-deployment
  annotations:
    "helm.sh/hook-weight": "{{ .Values.kafka.weight }}"
spec:
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.kafka.label }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.label }}
    spec:
      containers:
      - env:
        - name: KAFKA_BROKER_ID
          value: "{{ .Values.kafka.variables.brokerId }}"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ .Values.kafka.variables.zookeeperConnect }}
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: {{ .Values.kafka.variables.securityProtocolMap }}
        - name: KAFKA_ADVERTISED_LISTENERS
          value: {{ .Values.kafka.variables.advertisedListeners }}
        - name: KAFKA_LISTENERS
          value: {{ .Values.kafka.variables.listeners }}
        - name: KAFKA_NUM_PARTITIONS
          value: "{{ .Values.kafka.variables.numPartitions }}"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "{{ .Values.kafka.variables.replicationFactor }}"
        image: {{ .Values.kafka.image.name }}:{{ .Values.kafka.image.tag }}
        readinessProbe:
          exec:
            command: 
            - sh
            - -c
            - "nc -z localhost 9092 || exit -1"
          initialDelaySeconds: 5
          periodSeconds: 5
        imagePullPolicy: {{ .Values.kafka.pullPolicy }}
        name: {{ .Values.kafka.label }}
        resources:
          limits:
            memory: {{ .Values.kafka.resources.limits.memory }}
            cpu: {{ .Values.kafka.resources.limits.cpu }}
        ports:
        - containerPort: {{ .Values.kafka.port }}